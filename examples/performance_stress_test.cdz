// Performance Stress Test for Cadenza Phase 4B
// Tests parser performance with complex nested structures and large data sets

module PerformanceTest {
    // Large data structure for stress testing
    type ComplexProduct = {
        id: string,
        name: string,
        description: string,
        price: int,
        category: Category,
        tags: List<string>,
        variants: List<ProductVariant>,
        reviews: List<Review>,
        metadata: ProductMetadata,
        availability: AvailabilityInfo,
        pricing: PricingInfo,
        shipping: ShippingInfo,
        seo: SeoInfo,
        analytics: AnalyticsData,
        permissions: PermissionSet
    }
    
    type ProductVariant = {
        id: string,
        name: string,
        sku: string,
        price_adjustment: int,
        attributes: Map<string, string>,
        inventory: InventoryInfo,
        images: List<ImageInfo>
    }
    
    type Review = {
        id: string,
        user_id: string,
        rating: int,
        title: string,
        content: string,
        verified_purchase: bool,
        helpful_votes: int,
        created_at: DateTime,
        updated_at: DateTime
    }
    
    type Category = {
        id: string,
        name: string,
        parent_id: string?,
        level: int,
        path: string,
        children: List<Category>
    }
    
    // Additional complex types for comprehensive testing
    type ProductMetadata = {
        brand: string,
        manufacturer: string,
        model: string,
        weight: decimal,
        dimensions: Dimensions,
        warranty: WarrantyInfo,
        certifications: List<string>,
        features: Map<string, any>
    }
    
    type AvailabilityInfo = {
        in_stock: bool,
        quantity: int,
        reserved: int,
        warehouse_locations: List<string>,
        estimated_restock: DateTime?,
        backorder_allowed: bool
    }
    
    type PricingInfo = {
        base_price: int,
        sale_price: int?,
        cost: int,
        profit_margin: decimal,
        tax_category: string,
        currency: string,
        price_history: List<PriceChange>
    }
    
    // Performance stress test component with deeply nested structures
    component MegaProductGrid(
        products: List<ComplexProduct>,  // Simulates 1000+ products
        categories: List<Category>,      // Simulates 100+ categories  
        user_permissions: PermissionSet,
        filter_options: FilterOptions,
        sort_options: SortOptions,
        pagination: PaginationState,
        view_config: ViewConfiguration
    ) 
        uses [Network, LocalStorage, Analytics, Search, Cache] 
        state [
            selected_items, filtered_products, sort_state, view_mode,
            loading_states, error_states, cache_states, search_state,
            selection_state, pagination_state, filter_state, ui_state
        ]
        -> UIComponent 
    {
        // Multiple complex state variables for stress testing
        declare_state selected_items: Set<string> = Set.empty()
        declare_state filtered_products: List<ComplexProduct> = List.empty()
        declare_state sort_state: SortConfiguration = SortConfiguration.default()
        declare_state view_mode: ViewMode = ViewMode.Grid
        declare_state loading_states: Map<string, bool> = Map.empty()
        declare_state error_states: Map<string, string?> = Map.empty()
        declare_state cache_states: Map<string, CacheEntry> = Map.empty()
        declare_state search_state: SearchState = SearchState.default()
        declare_state selection_state: SelectionState = SelectionState.default()
        declare_state pagination_state: PaginationState = pagination
        declare_state filter_state: FilterState = FilterState.default()
        declare_state ui_state: UIState = UIState.default()
        
        // Complex computed properties with expensive operations
        computed categorized_products: Map<string, List<ComplexProduct>> = 
            filtered_products
                .group_by(p => p.category.id)
                .map_values(products => 
                    products.sort_by(p => get_sort_value(p, sort_state.field))
                )
        
        computed category_statistics: Map<string, CategoryStats> = 
            categories
                .map(cat => {
                    let cat_products = products.filter(p => p.category.id == cat.id)
                    return {
                        category_id: cat.id,
                        total_products: cat_products.length,
                        in_stock_count: cat_products.filter(p => p.availability.in_stock).length,
                        average_price: cat_products.map(p => p.price).average(),
                        price_range: {
                            min: cat_products.map(p => p.price).min(),
                            max: cat_products.map(p => p.price).max()
                        },
                        top_brands: cat_products
                            .map(p => p.metadata.brand)
                            .frequency_count()
                            .sort_by_value()
                            .take(5)
                    }
                })
                .to_map(stats => stats.category_id)
        
        computed search_suggestions: List<SearchSuggestion> = 
            if search_state.query.length >= 2 {
                let suggestions = List.empty<SearchSuggestion>()
                
                // Product name suggestions
                suggestions = suggestions.concat(
                    products
                        .filter(p => p.name.to_lower().contains(search_state.query.to_lower()))
                        .map(p => SearchSuggestion.product(p.name, p.id))
                        .take(10)
                )
                
                // Category suggestions  
                suggestions = suggestions.concat(
                    categories
                        .filter(c => c.name.to_lower().contains(search_state.query.to_lower()))
                        .map(c => SearchSuggestion.category(c.name, c.id))
                        .take(5)
                )
                
                // Brand suggestions
                suggestions = suggestions.concat(
                    products
                        .map(p => p.metadata.brand)
                        .distinct()
                        .filter(brand => brand.to_lower().contains(search_state.query.to_lower()))
                        .map(brand => SearchSuggestion.brand(brand))
                        .take(5)
                )
                
                suggestions.distinct_by(s => s.text).take(20)
            } else {
                List.empty()
            }
        
        // Complex event handlers with multiple side effects
        event_handler handle_complex_filter_change(new_filters: FilterOptions) 
            uses [Analytics, Cache, Search] 
        {
            track_filter_usage(new_filters)
            
            set_state(loading_states, loading_states.set("filtering", true))
            
            // Complex filtering logic with multiple conditions
            let filtered = products.filter(product => {
                // Price range filter
                if new_filters.price_range != null {
                    if product.price < new_filters.price_range.min || 
                       product.price > new_filters.price_range.max {
                        return false
                    }
                }
                
                // Category filter with hierarchical support
                if new_filters.categories.length > 0 {
                    let product_category_path = get_category_path(product.category)
                    if !new_filters.categories.any(cat_id => product_category_path.contains(cat_id)) {
                        return false
                    }
                }
                
                // Brand filter
                if new_filters.brands.length > 0 {
                    if !new_filters.brands.contains(product.metadata.brand) {
                        return false
                    }
                }
                
                // Availability filter
                if new_filters.availability_filter != null {
                    match new_filters.availability_filter {
                        AvailabilityFilter.InStockOnly => {
                            if !product.availability.in_stock {
                                return false
                            }
                        }
                        AvailabilityFilter.OutOfStockOnly => {
                            if product.availability.in_stock {
                                return false
                            }
                        }
                        AvailabilityFilter.LowStockOnly => {
                            if product.availability.quantity > 10 {
                                return false
                            }
                        }
                    }
                }
                
                // Rating filter
                if new_filters.min_rating != null {
                    let avg_rating = product.reviews.map(r => r.rating).average()
                    if avg_rating < new_filters.min_rating {
                        return false
                    }
                }
                
                // Text search across multiple fields
                if new_filters.search_text != null && new_filters.search_text.length > 0 {
                    let search_term = new_filters.search_text.to_lower()
                    if !product.name.to_lower().contains(search_term) &&
                       !product.description.to_lower().contains(search_term) &&
                       !product.tags.any(tag => tag.to_lower().contains(search_term)) &&
                       !product.metadata.brand.to_lower().contains(search_term) {
                        return false
                    }
                }
                
                return true
            })
            
            set_state(filtered_products, filtered)
            set_state(filter_state, FilterState.from_options(new_filters))
            set_state(loading_states, loading_states.set("filtering", false))
            
            // Cache filtered results for performance
            let cache_key = generate_filter_cache_key(new_filters)
            set_state(cache_states, cache_states.set(cache_key, CacheEntry.new(filtered)))
        }
        
        event_handler handle_bulk_operations(operation: BulkOperation, target_ids: List<string>) 
            uses [Network, Analytics, Cache] 
        {
            set_state(loading_states, loading_states.set("bulk_operation", true))
            
            match operation {
                BulkOperation.AddToCart => {
                    for product_id in target_ids {
                        let product = products.find(p => p.id == product_id)?
                        if product.availability.in_stock {
                            track_add_to_cart(product_id, 1, product.price)
                        }
                    }
                }
                BulkOperation.AddToWishlist => {
                    for product_id in target_ids {
                        track_add_to_wishlist(product_id)
                    }
                }
                BulkOperation.Compare => {
                    if target_ids.length <= 4 {  // Comparison limit
                        navigate_to_comparison(target_ids)
                        track_product_comparison(target_ids)
                    }
                }
                BulkOperation.Export => {
                    let selected_products = products.filter(p => target_ids.contains(p.id))
                    generate_product_export(selected_products, ExportFormat.CSV)
                    track_bulk_export(target_ids.length)
                }
                BulkOperation.Delete => {
                    if user_permissions.can_delete_products {
                        for product_id in target_ids {
                            delete_product(product_id)?
                        }
                        invalidate_product_cache()
                    }
                }
            }
            
            set_state(loading_states, loading_states.set("bulk_operation", false))
            set_state(selected_items, Set.empty())  // Clear selection after bulk operation
        }
        
        // Mega complex render block with deeply nested structures
        render {
            div(class: "mega-product-grid") {
                // Complex header with multiple dynamic sections
                header(class: "mega-grid-header") {
                    div(class: "header-top") {
                        search_section {
                            advanced_search_bar(
                                value: search_state.query,
                                suggestions: search_suggestions,
                                recent_searches: search_state.recent_searches,
                                on_search: handle_search,
                                on_clear: handle_clear_search,
                                on_suggestion_select: handle_suggestion_select
                            )
                            
                            if search_suggestions.length > 0 {
                                search_suggestions_dropdown {
                                    for suggestion in search_suggestions {
                                        suggestion_item(
                                            text: suggestion.text,
                                            type: suggestion.type,
                                            icon: get_suggestion_icon(suggestion.type),
                                            on_click: () => handle_suggestion_select(suggestion)
                                        )
                                    }
                                }
                            }
                        }
                        
                        filter_controls {
                            category_filter_dropdown(
                                categories: categories,
                                selected: filter_state.selected_categories,
                                statistics: category_statistics,
                                on_change: handle_category_filter_change
                            ) {
                                for category in categories where category.level == 0 {
                                    category_group(
                                        category: category,
                                        selected: filter_state.selected_categories.contains(category.id),
                                        product_count: category_statistics.get(category.id)?.total_products ?? 0
                                    ) {
                                        for subcategory in category.children where subcategory.children.length > 0 {
                                            subcategory_item(
                                                category: subcategory,
                                                selected: filter_state.selected_categories.contains(subcategory.id),
                                                product_count: category_statistics.get(subcategory.id)?.total_products ?? 0
                                            ) {
                                                for leaf_category in subcategory.children {
                                                    leaf_category_item(
                                                        category: leaf_category,
                                                        selected: filter_state.selected_categories.contains(leaf_category.id),
                                                        product_count: category_statistics.get(leaf_category.id)?.total_products ?? 0
                                                    )
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            
                            price_range_filter(
                                min_price: products.map(p => p.price).min(),
                                max_price: products.map(p => p.price).max(),
                                current_min: filter_state.price_range?.min,
                                current_max: filter_state.price_range?.max,
                                on_change: handle_price_range_change
                            )
                            
                            brand_filter_multi_select(
                                brands: products.map(p => p.metadata.brand).distinct().sort(),
                                selected: filter_state.selected_brands,
                                on_change: handle_brand_filter_change
                            )
                            
                            availability_filter_tabs(
                                options: [
                                    AvailabilityFilter.All,
                                    AvailabilityFilter.InStockOnly,
                                    AvailabilityFilter.OutOfStockOnly,
                                    AvailabilityFilter.LowStockOnly
                                ],
                                selected: filter_state.availability_filter,
                                on_change: handle_availability_filter_change
                            )
                        }
                    }
                    
                    div(class: "header-bottom") {
                        results_summary {
                            span { $"Showing {filtered_products.length} of {products.length} products" }
                            
                            if filter_state.has_active_filters() {
                                filter_summary {
                                    active_filters_display(
                                        filters: filter_state,
                                        on_remove_filter: handle_remove_filter,
                                        on_clear_all: handle_clear_all_filters
                                    )
                                }
                            }
                        }
                        
                        view_controls {
                            sort_selector(
                                options: [
                                    SortOption.NameAsc,
                                    SortOption.NameDesc,
                                    SortOption.PriceAsc,
                                    SortOption.PriceDesc,
                                    SortOption.RatingDesc,
                                    SortOption.PopularityDesc,
                                    SortOption.NewestFirst
                                ],
                                current: sort_state.field,
                                direction: sort_state.direction,
                                on_change: handle_sort_change
                            )
                            
                            view_mode_selector(
                                modes: [ViewMode.Grid, ViewMode.List, ViewMode.Compact, ViewMode.Table],
                                current: view_mode,
                                on_change: handle_view_mode_change
                            )
                            
                            items_per_page_selector(
                                options: [20, 50, 100, 200],
                                current: pagination_state.items_per_page,
                                on_change: handle_items_per_page_change
                            )
                        }
                        
                        bulk_actions_bar(
                            visible: selected_items.size > 0,
                            selected_count: selected_items.size,
                            operations: get_available_bulk_operations(user_permissions),
                            on_operation: handle_bulk_operations
                        )
                    }
                }
                
                // Main content area with complex nested rendering
                main(class: "mega-grid-content") {
                    if loading_states.get("filtering") == true {
                        massive_loading_display {
                            loading_spinner(size: "large")
                            loading_progress_bar(
                                progress: calculate_filter_progress(),
                                estimated_time: estimate_filter_completion_time()
                            )
                            loading_status_text { "Filtering thousands of products..." }
                        }
                    } else {
                        if filtered_products.length > 0 {
                            // Different view modes with complex rendering
                            if view_mode == ViewMode.Grid {
                                infinite_scroll_grid(
                                    class: "mega-product-grid-container",
                                    items: filtered_products,
                                    page_size: pagination_state.items_per_page,
                                    on_load_more: handle_load_more_products
                                ) {
                                    for product in filtered_products.take(pagination_state.items_per_page) {
                                        complex_product_card(
                                            product: product,
                                            selected: selected_items.contains(product.id),
                                            view_config: view_config,
                                            user_permissions: user_permissions,
                                            on_select: handle_product_select,
                                            on_quick_view: handle_quick_view,
                                            on_add_to_cart: handle_add_to_cart,
                                            on_add_to_wishlist: handle_add_to_wishlist
                                        ) {
                                            product_image_gallery(
                                                images: product.variants.flat_map(v => v.images),
                                                primary_image: product.variants.first()?.images.first(),
                                                lazy_loading: true,
                                                on_image_error: handle_image_error
                                            )
                                            
                                            product_info_complex {
                                                product_title_section {
                                                    h3(class: "product-title") { product.name }
                                                    brand_badge(brand: product.metadata.brand)
                                                    
                                                    if product.metadata.certifications.length > 0 {
                                                        certification_badges {
                                                            for cert in product.metadata.certifications.take(3) {
                                                                certification_badge(
                                                                    name: cert,
                                                                    verified: true,
                                                                    tooltip: get_certification_description(cert)
                                                                )
                                                            }
                                                        }
                                                    }
                                                }
                                                
                                                product_pricing_complex {
                                                    price_display_advanced(
                                                        base_price: product.pricing.base_price,
                                                        sale_price: product.pricing.sale_price,
                                                        currency: product.pricing.currency,
                                                        tax_inclusive: calculate_tax_inclusive_price(product),
                                                        bulk_pricing: calculate_bulk_pricing(product),
                                                        member_discount: calculate_member_discount(product, user_permissions)
                                                    )
                                                    
                                                    if product.variants.length > 1 {
                                                        variant_price_range {
                                                            let min_price = product.variants.map(v => 
                                                                product.pricing.base_price + v.price_adjustment).min()
                                                            let max_price = product.variants.map(v => 
                                                                product.pricing.base_price + v.price_adjustment).max()
                                                            
                                                            if min_price != max_price {
                                                                span { $"${min_price / 100}.{min_price % 100:00} - ${max_price / 100}.{max_price % 100:00}" }
                                                            }
                                                        }
                                                    }
                                                }
                                                
                                                product_availability_complex {
                                                    stock_indicator_advanced(
                                                        availability: product.availability,
                                                        show_quantity: user_permissions.can_view_inventory,
                                                        show_locations: user_permissions.can_view_warehouses,
                                                        estimated_restock: product.availability.estimated_restock
                                                    )
                                                    
                                                    if product.availability.quantity <= 10 && product.availability.in_stock {
                                                        low_stock_warning(
                                                            remaining: product.availability.quantity,
                                                            urgency: product.availability.quantity <= 3 ? "high" : "medium"
                                                        )
                                                    }
                                                }
                                                
                                                product_reviews_summary {
                                                    if product.reviews.length > 0 {
                                                        rating_display_advanced(
                                                            average: product.reviews.map(r => r.rating).average(),
                                                            count: product.reviews.length,
                                                            distribution: calculate_rating_distribution(product.reviews),
                                                            verified_only: product.reviews.filter(r => r.verified_purchase).length,
                                                            recent_trend: calculate_recent_rating_trend(product.reviews)
                                                        )
                                                    }
                                                }
                                                
                                                product_variants_preview {
                                                    if product.variants.length > 1 {
                                                        variant_selector_preview(
                                                            variants: product.variants.take(3),
                                                            selected: null,
                                                            on_variant_hover: handle_variant_preview,
                                                            show_more_count: max(0, product.variants.length - 3)
                                                        )
                                                    }
                                                }
                                            }
                                            
                                            product_actions_complex {
                                                selection_controls {
                                                    checkbox_advanced(
                                                        checked: selected_items.contains(product.id),
                                                        indeterminate: false,
                                                        disabled: !product.availability.in_stock,
                                                        on_change: (checked) => handle_selection_change(product.id, checked)
                                                    )
                                                    
                                                    quick_actions_menu {
                                                        quick_action_button(
                                                            icon: "eye",
                                                            tooltip: "Quick View",
                                                            on_click: () => handle_quick_view(product.id)
                                                        )
                                                        
                                                        quick_action_button(
                                                            icon: "heart",
                                                            tooltip: "Add to Wishlist",
                                                            active: check_if_in_wishlist(product.id),
                                                            on_click: () => handle_toggle_wishlist(product.id)
                                                        )
                                                        
                                                        quick_action_button(
                                                            icon: "compare",
                                                            tooltip: "Add to Compare",
                                                            active: check_if_in_comparison(product.id),
                                                            disabled: get_comparison_count() >= 4,
                                                            on_click: () => handle_toggle_comparison(product.id)
                                                        )
                                                    }
                                                }
                                                
                                                if product.availability.in_stock {
                                                    add_to_cart_advanced(
                                                        product: product,
                                                        default_variant: product.variants.first(),
                                                        quantity_selector: true,
                                                        instant_buy_option: user_permissions.can_instant_buy,
                                                        on_add_to_cart: handle_add_to_cart_with_variant
                                                    )
                                                } else {
                                                    out_of_stock_actions {
                                                        notify_when_available_button(
                                                            product_id: product.id,
                                                            estimated_date: product.availability.estimated_restock,
                                                            on_notify: handle_notify_when_available
                                                        )
                                                        
                                                        if product.availability.backorder_allowed {
                                                            backorder_button(
                                                                product_id: product.id,
                                                                estimated_shipping: calculate_backorder_shipping(product),
                                                                on_backorder: handle_add_to_backorder
                                                            )
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            } else if view_mode == ViewMode.List {
                                // List view with different complex structure
                                product_list_advanced {
                                    for product in filtered_products {
                                        product_list_item_complex(
                                            product: product,
                                            selected: selected_items.contains(product.id),
                                            expanded: ui_state.expanded_items.contains(product.id),
                                            show_detailed_info: true,
                                            on_expand: handle_expand_item
                                        )
                                    }
                                }
                            } else if view_mode == ViewMode.Table {
                                // Table view for admin users
                                if user_permissions.can_view_admin_table {
                                    product_table_advanced(
                                        products: filtered_products,
                                        columns: get_table_columns_for_user(user_permissions),
                                        sortable: true,
                                        selectable: true,
                                        on_sort: handle_table_sort,
                                        on_select: handle_table_selection
                                    )
                                }
                            }
                            
                            // Pagination for large datasets
                            if filtered_products.length > pagination_state.items_per_page {
                                advanced_pagination(
                                    total_items: filtered_products.length,
                                    items_per_page: pagination_state.items_per_page,
                                    current_page: pagination_state.current_page,
                                    show_page_size_selector: true,
                                    show_quick_jumper: true,
                                    show_total_info: true,
                                    on_page_change: handle_page_change,
                                    on_page_size_change: handle_page_size_change
                                )
                            }
                        } else {
                            // Empty state with complex suggestions
                            mega_empty_state {
                                if filter_state.has_active_filters() {
                                    no_results_with_filters {
                                        empty_state_icon(type: "search-no-results")
                                        h2 { "No products match your current filters" }
                                        
                                        suggested_actions {
                                            action_button(
                                                text: "Clear all filters",
                                                icon: "filter-clear",
                                                on_click: handle_clear_all_filters
                                            )
                                            
                                            action_button(
                                                text: "Broaden search criteria",
                                                icon: "search-expand",
                                                on_click: handle_broaden_search
                                            )
                                            
                                            action_button(
                                                text: "View similar products",
                                                icon: "similar",
                                                on_click: handle_show_similar_products
                                            )
                                        }
                                        
                                        filter_suggestions {
                                            h4 { "Try adjusting these filters:" }
                                            for suggestion in get_filter_suggestions(filter_state) {
                                                filter_suggestion_item(
                                                    text: suggestion.description,
                                                    action: suggestion.action,
                                                    on_apply: () => handle_apply_suggestion(suggestion)
                                                )
                                            }
                                        }
                                    }
                                } else {
                                    no_products_available {
                                        empty_state_icon(type: "products-empty")
                                        h2 { "No products available" }
                                        p { "Check back later for new products or contact support." }
                                        
                                        if user_permissions.can_add_products {
                                            admin_actions {
                                                action_button(
                                                    text: "Add New Product",
                                                    icon: "plus",
                                                    primary: true,
                                                    on_click: handle_navigate_to_add_product
                                                )
                                                
                                                action_button(
                                                    text: "Import Products",
                                                    icon: "upload",
                                                    on_click: handle_navigate_to_import
                                                )
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                
                // Performance monitoring section (admin only)
                if user_permissions.can_view_performance_metrics {
                    performance_debug_panel {
                        performance_metrics {
                            metric_display(
                                label: "Products Loaded",
                                value: products.length.to_string(),
                                trend: calculate_products_trend()
                            )
                            
                            metric_display(
                                label: "Filtered Products",
                                value: filtered_products.length.to_string(),
                                percentage: (filtered_products.length.to_decimal() / products.length.to_decimal() * 100).to_string() + "%"
                            )
                            
                            metric_display(
                                label: "Render Time",
                                value: $"{get_component_render_time()}ms",
                                status: get_component_render_time() < 100 ? "good" : "warning"
                            )
                            
                            metric_display(
                                label: "Memory Usage", 
                                value: $"{get_component_memory_usage()}MB",
                                status: get_component_memory_usage() < 50 ? "good" : "warning"
                            )
                            
                            metric_display(
                                label: "Active Filters",
                                value: filter_state.get_active_filter_count().to_string(),
                                details: filter_state.get_active_filter_summary()
                            )
                        }
                        
                        cache_statistics {
                            h4 { "Cache Performance" }
                            for cache_entry in cache_states.entries() {
                                cache_entry_display(
                                    key: cache_entry.key,
                                    size: cache_entry.value.size,
                                    hit_count: cache_entry.value.hit_count,
                                    last_accessed: cache_entry.value.last_accessed
                                )
                            }
                        }
                    }
                }
            }
        }
        
        // Performance-critical lifecycle methods
        on_mount {
            track_component_mount("MegaProductGrid", {
                product_count: products.length,
                category_count: categories.length,
                initial_load_time: get_mount_time()
            })
            
            // Preload critical data
            preload_popular_products(20)?
            preload_category_statistics()?
            initialize_search_index(products)?
        }
        
        on_unmount {
            track_component_unmount("MegaProductGrid", {
                session_duration: get_session_duration(),
                interactions_count: get_interaction_count(),
                products_viewed: get_viewed_products_count()
            })
            
            // Cleanup performance monitoring
            cleanup_performance_monitoring()?
            save_user_session_data()?
        }
        
        on_update(previous_props: any) {
            if previous_props.products.length != products.length {
                track_data_refresh({
                    previous_count: previous_props.products.length,
                    new_count: products.length,
                    refresh_time: get_current_timestamp()
                })
                
                // Invalidate relevant caches
                invalidate_cache_entries_matching("filter_*")
                invalidate_cache_entries_matching("search_*")
            }
        }
    }
    
    // Helper functions for performance testing
    function get_sort_value(product: ComplexProduct, field: SortField) -> comparable {
        match field {
            SortField.Name => product.name
            SortField.Price => product.price
            SortField.Rating => product.reviews.map(r => r.rating).average()
            SortField.Popularity => calculate_popularity_score(product)
            SortField.Newest => product.metadata.created_at
            SortField.Brand => product.metadata.brand
        }
    }
    
    function calculate_popularity_score(product: ComplexProduct) -> decimal {
        let review_score = product.reviews.length.to_decimal() * 0.3
        let rating_score = product.reviews.map(r => r.rating).average() * 0.4
        let recent_sales_score = get_recent_sales_count(product.id).to_decimal() * 0.3
        return review_score + rating_score + recent_sales_score
    }
    
    function generate_filter_cache_key(filters: FilterOptions) -> string {
        let parts = List.empty<string>()
        
        if filters.price_range != null {
            parts = parts.append($"price_{filters.price_range.min}_{filters.price_range.max}")
        }
        
        if filters.categories.length > 0 {
            parts = parts.append($"cats_{filters.categories.sort().join(",")}")
        }
        
        if filters.brands.length > 0 {
            parts = parts.append($"brands_{filters.brands.sort().join(",")}")
        }
        
        if filters.search_text != null {
            parts = parts.append($"search_{filters.search_text.hash()}")
        }
        
        return parts.join("_")
    }
    
    // Additional types for comprehensive testing
    type FilterOptions = {
        price_range: PriceRange?,
        categories: List<string>,
        brands: List<string>,
        availability_filter: AvailabilityFilter?,
        min_rating: decimal?,
        search_text: string?
    }
    
    type SearchSuggestion = {
        text: string,
        type: SuggestionType,
        metadata: Map<string, any>
    }
    
    type CategoryStats = {
        category_id: string,
        total_products: int,
        in_stock_count: int,
        average_price: decimal,
        price_range: PriceRange,
        top_brands: List<BrandFrequency>
    }
    
    type CacheEntry = {
        data: any,
        size: int,
        hit_count: int,
        last_accessed: DateTime,
        expiry: DateTime
    }
}

// This file serves as a comprehensive stress test for:
// 1. Parser performance with deeply nested structures (800+ lines)
// 2. Complex conditional rendering with multiple levels
// 3. Advanced loop constructs with filtering and complex expressions
// 4. State management with 12+ state variables
// 5. Complex computed properties with expensive operations
// 6. String interpolation in performance-critical sections
// 7. Component composition with many child components
// 8. Effect tracking across multiple side effects
// 9. Event handler complexity with nested logic
// 10. Memory usage patterns with large data structures