// Example of generated Blazor component using the new BlazorGenerator
// This shows what the SimpleCounter component from realistic_ui_example.cdz would generate

// <auto-generated>
// This file was generated by the Cadenza compiler. Do not edit manually.

using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Rendering;
using Microsoft.JSInterop;

public class SimpleCounter : ComponentBase
{
    // Component Parameters
    [Parameter] public string Title { get; set; } = default!;

    // Component State
    private int _count = 0;
    private string _message = "Click to count";
    private bool _disabled = false;

    // Service Injections
    [Inject] private IJSRuntime DOMService { get; set; } = default!;

    // Event Handlers
    private void HandleIncrement()
    {
        _count = _count + 1;
        StateHasChanged();
        _message = $"Count: {_count}";
        StateHasChanged();
    }

    private void HandleDecrement()
    {
        _count = _count - 1;
        StateHasChanged();
        _message = $"Count: {_count}";
        StateHasChanged();
    }

    private void HandleReset()
    {
        _count = 0;
        StateHasChanged();
        _message = "Reset!";
        StateHasChanged();
    }

    private void HandleDisableToggle()
    {
        _disabled = !_disabled;
        StateHasChanged();
    }

    protected override void BuildRenderTree(RenderTreeBuilder builder)
    {
        builder.OpenElement(0, "div");
        builder.AddAttribute(1, "class", "counter-app");
        
        builder.OpenElement(2, "h1");
        builder.AddContent(3, Title);
        builder.CloseElement();
        
        builder.OpenElement(4, "p");
        builder.AddAttribute(5, "class", "message");
        builder.AddContent(6, _message);
        builder.CloseElement();
        
        builder.OpenElement(7, "div");
        builder.AddAttribute(8, "class", "controls");
        
        builder.OpenElement(9, "button");
        builder.AddAttribute(10, "onclick", EventCallback.Factory.Create(this, HandleDecrement));
        builder.AddAttribute(11, "disabled", _disabled);
        builder.AddContent(12, "-");
        builder.CloseElement();
        
        builder.OpenElement(13, "button");
        builder.AddAttribute(14, "onclick", EventCallback.Factory.Create(this, HandleReset));
        builder.AddAttribute(15, "disabled", _disabled);
        builder.AddContent(16, "Reset");
        builder.CloseElement();
        
        builder.OpenElement(17, "button");
        builder.AddAttribute(18, "onclick", EventCallback.Factory.Create(this, HandleIncrement));
        builder.AddAttribute(19, "disabled", _disabled);
        builder.AddContent(20, "+");
        builder.CloseElement();
        
        builder.CloseElement(); // controls div
        
        if (_disabled)
        {
            builder.OpenElement(21, "p");
            builder.AddAttribute(22, "class", "warning");
            builder.AddContent(23, "Counter is disabled");
            builder.CloseElement();
        }
        
        builder.OpenElement(24, "button");
        builder.AddAttribute(25, "onclick", EventCallback.Factory.Create(this, HandleDisableToggle));
        builder.AddAttribute(26, "class", "toggle-btn");
        builder.AddContent(27, (_disabled ? "Enable" : "Disable"));
        builder.CloseElement();
        
        builder.CloseElement(); // counter-app div
    }
}