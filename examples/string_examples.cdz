// Comprehensive string literal examples for Cadenza

// Basic string literals
function get_greeting() -> string {
    return "Hello, world!"
}

// String literals with escape sequences  
function get_multiline_message() -> string {
    return "Line 1\nLine 2\nLine 3"
}

function get_escaped_quotes() -> string {
    return "She said \"Hello\" to me"
}

function get_path_example() -> string {
    return "C:\\Users\\Name\\Documents\\file.txt"
}

// String concatenation
function greet(name: string) -> string {
    return "Hello, " + name + "!"
}

function build_message(greeting: string, name: string, punctuation: string) -> string {
    return greeting + " " + name + punctuation
}

// String interpolation
function format_user_info(user: string, count: int) -> string {
    return $"User {user} has {count} items"
}

function format_calculation(a: int, b: int, result: int) -> string {
    return $"The result of {a} + {b} = {result}"
}

function format_nested_data(name: string, age: int, score: int) -> string {
    return $"Player {name} (age {age}) scored {score} points"
}

// Complex string operations combining features
function get_error_message(operation: string, code: int) -> string {
    let base_msg = "Error occurred during: " + operation
    return $"{base_msg}\nError code: {code}\nPlease try again"
}

// Using strings with Result types
function validate_and_format(input: string) -> Result<string, string> {
    if input == "" {
        return Error("Input cannot be empty")
    }
    return Ok($"Processed: {input}")
}

function safe_format_division(a: int, b: int) -> Result<string, string> {
    if b == 0 {
        return Error("Cannot divide by zero")
    }
    let result = a / b
    return Ok($"Division result: {a} / {b} = {result}")
}