// Weather Forecast API Example
// Demonstrates Cadenza HTTP service with comprehensive error handling

// Define data construction functions
function create_weather_forecast(date: string, temperature_celsius: int, temperature_fahrenheit: int, summary: string) -> Result<string, string> {
    return Ok("WeatherForecast:" + date + "," + temperature_celsius + "," + temperature_fahrenheit + "," + summary)
}

function create_api_error(code: int, message: string) -> Result<string, string> {
    return Ok("ApiError:" + code + "," + message)
}

// Pure function to convert temperatures
pure function celsius_to_fahrenheit(celsius: int) -> int {
    return celsius * 9 / 5 + 32
}

// Pure function to get weather summary
pure function get_weather_summary(temp: int) -> string {
    if temp < 0 {
        return "Freezing"
    }
    if temp < 10 {
        return "Cold"
    }
    if temp < 20 {
        return "Cool"
    }
    if temp < 30 {
        return "Warm"
    }
    return "Hot"
}

// Function to generate forecast data
function generate_forecast_data(days: int) uses [Memory] -> Result<List<string>, string> {
    
    if days < 1 {
        return Error("Days must be positive")
    }
    
    if days > 10 {
        return Error("Cannot forecast more than 10 days")
    }
    
    // Generate sample forecast data for the first day
    let base_temp = 20
    let temp_celsius = base_temp + (days * 2) - 5
    let temp_fahrenheit = celsius_to_fahrenheit(temp_celsius)
    let summary = get_weather_summary(temp_celsius)
    let date = "2024-01-01"
    
    let forecast = create_weather_forecast(date, temp_celsius, temp_fahrenheit, summary)?
    
    // Return a single forecast as a list with one element
    return Ok([forecast])
}

// HTTP endpoint handler for weather forecast
function get_weather_forecast(days_param: string) uses [Network, Logging, Memory] -> Result<string, string> {
    
    // Log the request
    let log_result = log_request("GET /weatherforecast?days=" + days_param)?
    
    // Parse days parameter
    let days = parse_int(days_param)
    if days == 0 {
        return Error("Invalid days parameter")
    }
    
    // Generate forecast data
    let forecasts = generate_forecast_data(days)?
    
    // Log success
    let success_log = log_info("Generated " + days + " day forecast")?
    
    return Ok("Weather forecast data generated")
}

// HTTP endpoint handler for single day forecast
function get_today_forecast() uses [Network, Logging, Memory] -> Result<string, string> {
    
    let log_result = log_request("GET /weatherforecast/today")?
    
    let forecasts = generate_forecast_data(1)?
    if forecasts == [] {
        return Error("Failed to generate forecast")
    }
    
    return Ok("Today's weather forecast generated")
}

// Logging utility functions
function log_request(request: string) uses [Logging] -> Result<string, string> {
    // Would integrate with actual logging system
    return Ok("Logged: " + request)
}

function log_info(message: string) uses [Logging] -> Result<string, string> {
    // Would integrate with actual logging system  
    return Ok("Info: " + message)
}

function log_error(error: string) uses [Logging] -> Result<string, string> {
    // Would integrate with actual logging system
    return Ok("Error: " + error)
}

// Utility function to parse integer from string
function parse_int(value: string) -> int {
    // Simple parsing simulation - would use actual parsing in real implementation
    if value == "1" { return 1 }
    if value == "2" { return 2 }
    if value == "3" { return 3 }
    if value == "4" { return 4 }
    if value == "5" { return 5 }
    if value == "6" { return 6 }
    if value == "7" { return 7 }
    if value == "8" { return 8 }
    if value == "9" { return 9 }
    if value == "10" { return 10 }
    return 0  // Invalid
}

// Main API service function
function weather_api_service(api_endpoint: string, query_params: string) uses [Network, Logging, Memory] -> Result<string, string> {
    
    if api_endpoint == "/weatherforecast" {
        let forecasts = get_weather_forecast(query_params)?
        return Ok("Weather forecast data generated successfully")
    }
    
    if api_endpoint == "/weatherforecast/today" {
        let forecast = get_today_forecast()?
        return Ok("Today's forecast generated successfully")
    }
    
    return Error("Endpoint not found")
}

// Application entry point
function main() uses [Network, Logging, Memory] -> Result<string, string> {
    let log_start = log_info("Weather API service starting")?
    
    // Simulate handling different API requests
    let result1 = weather_api_service("/weatherforecast", "5")?
    let result2 = weather_api_service("/weatherforecast/today", "")?
    
    let log_complete = log_info("Weather API service completed demo")?
    
    return Ok("Weather API demo completed successfully")
}