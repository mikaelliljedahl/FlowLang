// Cadenza Analysis Configuration Manager
// Manages cadenzalint.json configuration and rule settings

/*spec
intent: "Load and manage Cadenza static analysis configuration"
rules:
  - "Load cadenzalint.json configuration file with proper error handling"
  - "Provide rule enable/disable functionality"
  - "Support severity level configuration (error, warning, info)"
  - "Handle rule parameters for complex rules"
  - "Validate configuration format and provide defaults"
postconditions:
  - "Configuration is loaded and validated"
  - "Rules are properly configured with correct severities"
  - "Invalid configurations are reported with helpful messages"
spec*/

// Configuration structure for analysis rules
struct RuleConfig {
    level: string,
    enabled: bool,
    parameters: List<(string, string)>
}

struct AnalysisConfig {
    rules: List<(string, RuleConfig)>,
    exclude: List<string>,
    severity_threshold: string,
    auto_fix: bool,
    output_format: string
}

// Load configuration from cadenzalint.json
function load_config() uses [FileSystem, Logging] -> Result<AnalysisConfig, string> {
    Cadenza.Runtime.LoggingRuntime.LogInfo("Loading Cadenza analysis configuration...")
    
    let configPath = "cadenzalint.json"
    let configResult = Cadenza.Runtime.FileSystemRuntime.ReadFile(configPath)
    
    match configResult {
        Ok(configContent) -> {
            Cadenza.Runtime.LoggingRuntime.LogInfo("Configuration file found, parsing...")
            let parseResult = parse_config(configContent)
            match parseResult {
                Ok(config) -> {
                    Cadenza.Runtime.LoggingRuntime.LogInfo("Configuration loaded successfully")
                    return Ok(config)
                }
                Error(err) -> {
                    Cadenza.Runtime.LoggingRuntime.LogError("Failed to parse configuration: " + err)
                    return create_default_config()
                }
            }
        }
        Error(err) -> {
            Cadenza.Runtime.LoggingRuntime.LogWarning("No configuration file found, using defaults: " + err)
            return create_default_config()
        }
    }
}

// Parse JSON configuration content
function parse_config(content: string) -> Result<AnalysisConfig, string> {
    // Basic JSON parsing simulation for Cadenza
    // In a real implementation, this would use a proper JSON parser
    
    if Cadenza.Runtime.StringRuntime.Contains(content, "\"rules\"") {
        let rules = parse_rules_section(content)
        let excludeList = parse_exclude_section(content)
        let severityThreshold = parse_severity_threshold(content)
        let autoFix = parse_auto_fix(content)
        let outputFormat = parse_output_format(content)
        
        let config = AnalysisConfig {
            rules: rules,
            exclude: excludeList,
            severity_threshold: severityThreshold,
            auto_fix: autoFix,
            output_format: outputFormat
        }
        
        return Ok(config)
    } else {
        return Error("Invalid configuration format: missing 'rules' section")
    }
}

// Parse rules section from configuration
function parse_rules_section(content: string) -> List<(string, RuleConfig)> {
    let rules = []
    
    // Effect system rules
    if Cadenza.Runtime.StringRuntime.Contains(content, "effect-completeness") {
        let config = RuleConfig {
            level: extract_rule_level(content, "effect-completeness"),
            enabled: true,
            parameters: []
        }
        rules = ("effect-completeness", config) :: rules
    }
    
    if Cadenza.Runtime.StringRuntime.Contains(content, "effect-minimality") {
        let config = RuleConfig {
            level: extract_rule_level(content, "effect-minimality"),
            enabled: true,
            parameters: []
        }
        rules = ("effect-minimality", config) :: rules
    }
    
    if Cadenza.Runtime.StringRuntime.Contains(content, "effect-propagation") {
        let config = RuleConfig {
            level: extract_rule_level(content, "effect-propagation"),
            enabled: true,
            parameters: []
        }
        rules = ("effect-propagation", config) :: rules
    }
    
    if Cadenza.Runtime.StringRuntime.Contains(content, "pure-function-validation") {
        let config = RuleConfig {
            level: extract_rule_level(content, "pure-function-validation"),
            enabled: true,
            parameters: []
        }
        rules = ("pure-function-validation", config) :: rules
    }
    
    // Result type rules
    if Cadenza.Runtime.StringRuntime.Contains(content, "unused-results") {
        let config = RuleConfig {
            level: extract_rule_level(content, "unused-results"),
            enabled: true,
            parameters: []
        }
        rules = ("unused-results", config) :: rules
    }
    
    if Cadenza.Runtime.StringRuntime.Contains(content, "error-handling") {
        let config = RuleConfig {
            level: extract_rule_level(content, "error-handling"),
            enabled: true,
            parameters: []
        }
        rules = ("error-handling", config) :: rules
    }
    
    if Cadenza.Runtime.StringRuntime.Contains(content, "error-propagation-validation") {
        let config = RuleConfig {
            level: extract_rule_level(content, "error-propagation-validation"),
            enabled: true,
            parameters: []
        }
        rules = ("error-propagation-validation", config) :: rules
    }
    
    // Quality rules
    if Cadenza.Runtime.StringRuntime.Contains(content, "function-complexity") {
        let config = RuleConfig {
            level: extract_rule_level(content, "function-complexity"),
            enabled: true,
            parameters: [("maxLines", "50"), ("maxParams", "5")]
        }
        rules = ("function-complexity", config) :: rules
    }
    
    if Cadenza.Runtime.StringRuntime.Contains(content, "naming-convention") {
        let config = RuleConfig {
            level: extract_rule_level(content, "naming-convention"),
            enabled: true,
            parameters: []
        }
        rules = ("naming-convention", config) :: rules
    }
    
    // Security rules
    if Cadenza.Runtime.StringRuntime.Contains(content, "secret-detection") {
        let config = RuleConfig {
            level: extract_rule_level(content, "secret-detection"),
            enabled: true,
            parameters: []
        }
        rules = ("secret-detection", config) :: rules
    }
    
    if Cadenza.Runtime.StringRuntime.Contains(content, "input-validation") {
        let config = RuleConfig {
            level: extract_rule_level(content, "input-validation"),
            enabled: true,
            parameters: []
        }
        rules = ("input-validation", config) :: rules
    }
    
    // Performance rules
    if Cadenza.Runtime.StringRuntime.Contains(content, "string-concatenation") {
        let config = RuleConfig {
            level: extract_rule_level(content, "string-concatenation"),
            enabled: true,
            parameters: []
        }
        rules = ("string-concatenation", config) :: rules
    }
    
    return rules
}

// Extract rule level from configuration content
function extract_rule_level(content: string, ruleName: string) -> string {
    if Cadenza.Runtime.StringRuntime.Contains(content, ruleName + "\": \"error\"") {
        return "error"
    } else if Cadenza.Runtime.StringRuntime.Contains(content, ruleName + "\": \"warning\"") {
        return "warning"
    } else if Cadenza.Runtime.StringRuntime.Contains(content, ruleName + "\": \"info\"") {
        return "info"
    } else {
        return "warning"  // Default severity
    }
}

// Parse exclude section from configuration
function parse_exclude_section(content: string) -> List<string> {
    let excludeList = []
    
    if Cadenza.Runtime.StringRuntime.Contains(content, "\"exclude\"") {
        // Basic pattern matching for common exclude patterns
        if Cadenza.Runtime.StringRuntime.Contains(content, "generated/") {
            excludeList = "generated/" :: excludeList
        }
        
        if Cadenza.Runtime.StringRuntime.Contains(content, "*.test.cdz") {
            excludeList = "*.test.cdz" :: excludeList
        }
        
        if Cadenza.Runtime.StringRuntime.Contains(content, "temp_*") {
            excludeList = "temp_*" :: excludeList
        }
        
        if Cadenza.Runtime.StringRuntime.Contains(content, "build/") {
            excludeList = "build/" :: excludeList
        }
        
        if Cadenza.Runtime.StringRuntime.Contains(content, "node_modules/") {
            excludeList = "node_modules/" :: excludeList
        }
    }
    
    return excludeList
}

// Parse severity threshold from configuration
function parse_severity_threshold(content: string) -> string {
    if Cadenza.Runtime.StringRuntime.Contains(content, "\"severityThreshold\": \"error\"") {
        return "error"
    } else if Cadenza.Runtime.StringRuntime.Contains(content, "\"severityThreshold\": \"warning\"") {
        return "warning"
    } else if Cadenza.Runtime.StringRuntime.Contains(content, "\"severityThreshold\": \"info\"") {
        return "info"
    } else {
        return "warning"
    }
}

// Parse auto-fix setting from configuration
function parse_auto_fix(content: string) -> bool {
    if Cadenza.Runtime.StringRuntime.Contains(content, "\"autoFix\": true") {
        return true
    } else {
        return false
    }
}

// Parse output format from configuration
function parse_output_format(content: string) -> string {
    if Cadenza.Runtime.StringRuntime.Contains(content, "\"outputFormat\": \"json\"") {
        return "json"
    } else if Cadenza.Runtime.StringRuntime.Contains(content, "\"outputFormat\": \"sarif\"") {
        return "sarif"
    } else if Cadenza.Runtime.StringRuntime.Contains(content, "\"outputFormat\": \"html\"") {
        return "html"
    } else {
        return "text"
    }
}

// Create default configuration
function create_default_config() -> Result<AnalysisConfig, string> {
    let defaultRules = [
        ("effect-completeness", RuleConfig { level: "error", enabled: true, parameters: [] }),
        ("effect-minimality", RuleConfig { level: "warning", enabled: true, parameters: [] }),
        ("effect-propagation", RuleConfig { level: "error", enabled: true, parameters: [] }),
        ("pure-function-validation", RuleConfig { level: "error", enabled: true, parameters: [] }),
        ("unused-results", RuleConfig { level: "error", enabled: true, parameters: [] }),
        ("error-handling", RuleConfig { level: "error", enabled: true, parameters: [] }),
        ("error-propagation-validation", RuleConfig { level: "error", enabled: true, parameters: [] }),
        ("function-complexity", RuleConfig { level: "warning", enabled: true, parameters: [("maxLines", "50"), ("maxParams", "5")] }),
        ("naming-convention", RuleConfig { level: "info", enabled: true, parameters: [] }),
        ("secret-detection", RuleConfig { level: "error", enabled: true, parameters: [] }),
        ("input-validation", RuleConfig { level: "warning", enabled: true, parameters: [] }),
        ("string-concatenation", RuleConfig { level: "info", enabled: true, parameters: [] })
    ]
    
    let defaultConfig = AnalysisConfig {
        rules: defaultRules,
        exclude: ["generated/", "*.test.cdz", "temp_*", "build/", "node_modules/"],
        severity_threshold: "warning",
        auto_fix: false,
        output_format: "text"
    }
    
    return Ok(defaultConfig)
}

// Check if a rule is enabled
function is_rule_enabled(config: AnalysisConfig, ruleName: string) -> bool {
    let ruleResult = find_rule_config(config, ruleName)
    match ruleResult {
        Ok(ruleConfig) -> {
            return ruleConfig.enabled
        }
        Error(_) -> {
            return false
        }
    }
}

// Get rule severity level
function get_rule_severity(config: AnalysisConfig, ruleName: string) -> string {
    let ruleResult = find_rule_config(config, ruleName)
    match ruleResult {
        Ok(ruleConfig) -> {
            return ruleConfig.level
        }
        Error(_) -> {
            return "warning"
        }
    }
}

// Get rule parameters
function get_rule_parameters(config: AnalysisConfig, ruleName: string) -> List<(string, string)> {
    let ruleResult = find_rule_config(config, ruleName)
    match ruleResult {
        Ok(ruleConfig) -> {
            return ruleConfig.parameters
        }
        Error(_) -> {
            return []
        }
    }
}

// Find rule configuration by name
function find_rule_config(config: AnalysisConfig, ruleName: string) -> Result<RuleConfig, string> {
    let rules = config.rules
    
    // Simple linear search through rules
    if rules.length > 0 {
        let firstRule = rules[0]
        if firstRule.0 == ruleName {
            return Ok(firstRule.1)
        }
    }
    
    // Try to find in remaining rules (simplified for demonstration)
    // In a complete implementation, this would iterate through all rules
    
    return Error("Rule not found: " + ruleName)
}

// Check if a file should be excluded from analysis
function should_exclude_file(config: AnalysisConfig, filePath: string) -> bool {
    let excludePatterns = config.exclude
    
    // Check each exclude pattern
    if excludePatterns.length > 0 {
        let firstPattern = excludePatterns[0]
        if Cadenza.Runtime.StringRuntime.Contains(filePath, firstPattern) {
            return true
        }
    }
    
    // Check for test files
    if Cadenza.Runtime.StringRuntime.Contains(filePath, ".test.cdz") {
        return true
    }
    
    // Check for temporary files
    if Cadenza.Runtime.StringRuntime.Contains(filePath, "temp_") {
        return true
    }
    
    // Check for generated files
    if Cadenza.Runtime.StringRuntime.Contains(filePath, "generated/") {
        return true
    }
    
    return false
}

// Check if severity meets threshold
function meets_severity_threshold(config: AnalysisConfig, severity: string) -> bool {
    let threshold = config.severity_threshold
    
    if threshold == "error" {
        return severity == "error"
    } else if threshold == "warning" {
        return severity == "error" || severity == "warning"
    } else {
        return true  // "info" threshold includes all
    }
}

// Validate configuration
function validate_config(config: AnalysisConfig) uses [Logging] -> Result<string, string> {
    Cadenza.Runtime.LoggingRuntime.LogInfo("Validating configuration...")
    
    // Check output format
    let validFormats = ["text", "json", "sarif", "html"]
    if !is_valid_format(config.output_format, validFormats) {
        return Error("Invalid output format: " + config.output_format)
    }
    
    // Check severity threshold
    let validSeverities = ["error", "warning", "info"]
    if !is_valid_severity(config.severity_threshold, validSeverities) {
        return Error("Invalid severity threshold: " + config.severity_threshold)
    }
    
    // Validate rule configurations
    let ruleValidation = validate_rules(config.rules)
    match ruleValidation {
        Ok(_) -> {
            Cadenza.Runtime.LoggingRuntime.LogInfo("Configuration validation passed")
            return Ok("Configuration is valid")
        }
        Error(err) -> {
            Cadenza.Runtime.LoggingRuntime.LogError("Configuration validation failed: " + err)
            return Error(err)
        }
    }
}

// Check if format is valid
function is_valid_format(format: string, validFormats: List<string>) -> bool {
    if validFormats.length > 0 {
        let firstFormat = validFormats[0]
        if firstFormat == format {
            return true
        }
    }
    
    // In a complete implementation, this would check all formats
    return format == "text" || format == "json" || format == "sarif" || format == "html"
}

// Check if severity is valid
function is_valid_severity(severity: string, validSeverities: List<string>) -> bool {
    return severity == "error" || severity == "warning" || severity == "info"
}

// Validate rules configuration
function validate_rules(rules: List<(string, RuleConfig)>) -> Result<string, string> {
    if rules.length == 0 {
        return Error("No rules configured")
    }
    
    // Check first rule as example
    let firstRule = rules[0]
    let ruleConfig = firstRule.1
    
    if !is_valid_severity(ruleConfig.level, ["error", "warning", "info"]) {
        return Error("Invalid severity level for rule " + firstRule.0 + ": " + ruleConfig.level)
    }
    
    return Ok("Rules validation passed")
}

// Main function for testing configuration manager
function main() uses [FileSystem, Logging] -> Result<int, string> {
    Cadenza.Runtime.LoggingRuntime.LogInfo("Cadenza Configuration Manager Test")
    
    let configResult = load_config()
    match configResult {
        Ok(config) -> {
            let validationResult = validate_config(config)
            match validationResult {
                Ok(message) -> {
                    Cadenza.Runtime.LoggingRuntime.LogInfo("Configuration loaded and validated: " + message)
                    return Ok(0)
                }
                Error(err) -> {
                    Cadenza.Runtime.LoggingRuntime.LogError("Configuration validation failed: " + err)
                    return Error(err)
                }
            }
        }
        Error(err) -> {
            Cadenza.Runtime.LoggingRuntime.LogError("Failed to load configuration: " + err)
            return Error(err)
        }
    }
}