// Cadenza Effect System Analyzer
// Comprehensive analysis of effect system usage and patterns

/*spec
intent: "Analyze Cadenza effect system usage for completeness, minimality, and consistency"
rules:
  - "Validate effect completeness - all side effects must be declared"
  - "Check effect minimality - no unused effects should be declared"
  - "Ensure effect propagation - callers must handle or propagate callee effects"
  - "Validate pure function constraints - pure functions cannot have effects"
  - "Check effect consistency across function calls and propagation"
postconditions:
  - "All effect system violations are detected and reported"
  - "Actionable suggestions provided for each violation"
  - "Effect usage patterns are validated against Cadenza best practices"
spec*/

struct EffectIssue {
    rule_id: string,
    severity: string,
    message: string,
    file_path: string,
    line: int,
    column: int,
    fix_suggestion: string
}

struct EffectAnalysisResult {
    issues: List<EffectIssue>,
    total_functions: int,
    pure_functions: int,
    functions_with_effects: int,
    common_effects: List<(string, int)>
}

// Main effect analyzer function
function analyze_effects(file_path: string, content: string) uses [Logging] -> Result<EffectAnalysisResult, string> {
    Cadenza.Runtime.LoggingRuntime.LogInfo("Analyzing effect system usage in: " + file_path)
    
    let issues = []
    let totalFunctions = 0
    let pureFunctions = 0
    let functionsWithEffects = 0
    let commonEffects = []
    
    // Parse content and extract function information
    let functions = extract_functions(content)
    
    match functions {
        Ok(functionList) -> {
            totalFunctions = functionList.length
            
            // Analyze each function
            let analysisResult = analyze_function_effects(functionList, file_path, content)
            match analysisResult {
                Ok(functionIssues) -> {
                    issues = functionIssues
                    
                    // Count function types
                    let counts = count_function_types(functionList)
                    pureFunctions = counts.0
                    functionsWithEffects = counts.1
                    commonEffects = counts.2
                    
                    let result = EffectAnalysisResult {
                        issues: issues,
                        total_functions: totalFunctions,
                        pure_functions: pureFunctions,
                        functions_with_effects: functionsWithEffects,
                        common_effects: commonEffects
                    }
                    
                    Cadenza.Runtime.LoggingRuntime.LogInfo("Effect analysis completed - found " + Cadenza.Runtime.StringRuntime.ToString(issues.length) + " issues")
                    return Ok(result)
                }
                Error(err) -> {
                    Cadenza.Runtime.LoggingRuntime.LogError("Function analysis failed: " + err)
                    return Error(err)
                }
            }
        }
        Error(err) -> {
            Cadenza.Runtime.LoggingRuntime.LogError("Function extraction failed: " + err)
            return Error(err)
        }
    }
}

// Extract function information from source code
function extract_functions(content: string) -> Result<List<FunctionInfo>, string> {
    let functions = []
    
    // Simple pattern matching for function declarations
    let lines = Cadenza.Runtime.StringRuntime.Split(content, "\n")
    
    let functionInfo = extract_function_info(lines)
    match functionInfo {
        Ok(info) -> {
            functions = info :: functions
            return Ok(functions)
        }
        Error(err) -> {
            return Error(err)
        }
    }
}

struct FunctionInfo {
    name: string,
    is_pure: bool,
    declared_effects: List<string>,
    return_type: string,
    body_content: string,
    line_number: int
}

// Extract function information from lines
function extract_function_info(lines: List<string>) -> Result<FunctionInfo, string> {
    if lines.length > 0 {
        let firstLine = lines[0]
        
        // Check if this is a function declaration
        if Cadenza.Runtime.StringRuntime.Contains(firstLine, "function ") {
            let functionName = extract_function_name(firstLine)
            let isPure = Cadenza.Runtime.StringRuntime.Contains(firstLine, "pure ")
            let declaredEffects = extract_declared_effects(firstLine)
            let returnType = extract_return_type(firstLine)
            
            let info = FunctionInfo {
                name: functionName,
                is_pure: isPure,
                declared_effects: declaredEffects,
                return_type: returnType,
                body_content: join_lines(lines),
                line_number: 1
            }
            
            return Ok(info)
        }
    }
    
    return Error("No function found")
}

// Extract function name from declaration line
function extract_function_name(line: string) -> string {
    if Cadenza.Runtime.StringRuntime.Contains(line, "function ") {
        let parts = Cadenza.Runtime.StringRuntime.Split(line, " ")
        if parts.length > 1 {
            let namePart = parts[1]
            if Cadenza.Runtime.StringRuntime.Contains(namePart, "(") {
                let nameparts = Cadenza.Runtime.StringRuntime.Split(namePart, "(")
                if nameparts.length > 0 {
                    return nameparts[0]
                }
            }
            return namePart
        }
    }
    return "unknown"
}

// Extract declared effects from function declaration
function extract_declared_effects(line: string) -> List<string> {
    let effects = []
    
    if Cadenza.Runtime.StringRuntime.Contains(line, "uses [") {
        // Extract effects between "uses [" and "]"
        if Cadenza.Runtime.StringRuntime.Contains(line, "FileSystem") {
            effects = "FileSystem" :: effects
        }
        
        if Cadenza.Runtime.StringRuntime.Contains(line, "Database") {
            effects = "Database" :: effects
        }
        
        if Cadenza.Runtime.StringRuntime.Contains(line, "Network") {
            effects = "Network" :: effects
        }
        
        if Cadenza.Runtime.StringRuntime.Contains(line, "Logging") {
            effects = "Logging" :: effects
        }
        
        if Cadenza.Runtime.StringRuntime.Contains(line, "IO") {
            effects = "IO" :: effects
        }
        
        if Cadenza.Runtime.StringRuntime.Contains(line, "Memory") {
            effects = "Memory" :: effects
        }
    }
    
    return effects
}

// Extract return type from function declaration
function extract_return_type(line: string) -> string {
    if Cadenza.Runtime.StringRuntime.Contains(line, "-> ") {
        let parts = Cadenza.Runtime.StringRuntime.Split(line, "-> ")
        if parts.length > 1 {
            let returnPart = parts[1]
            if Cadenza.Runtime.StringRuntime.Contains(returnPart, " {") {
                let typeparts = Cadenza.Runtime.StringRuntime.Split(returnPart, " {")
                if typeparts.length > 0 {
                    return typeparts[0]
                }
            }
            return returnPart
        }
    }
    return "void"
}

// Join lines for body content
function join_lines(lines: List<string>) -> string {
    if lines.length > 0 {
        return lines[0]
    }
    return ""
}

// Analyze function effects and return issues
function analyze_function_effects(functions: List<FunctionInfo>, file_path: string, content: string) -> Result<List<EffectIssue>, string> {
    let allIssues = []
    
    if functions.length > 0 {
        let firstFunction = functions[0]
        
        // Check effect completeness
        let completenessIssues = check_effect_completeness(firstFunction, file_path)
        allIssues = append_issues(allIssues, completenessIssues)
        
        // Check effect minimality
        let minimalityIssues = check_effect_minimality(firstFunction, file_path)
        allIssues = append_issues(allIssues, minimalityIssues)
        
        // Check pure function validation
        let pureIssues = check_pure_function_validation(firstFunction, file_path)
        allIssues = append_issues(allIssues, pureIssues)
        
        // Check effect propagation
        let propagationIssues = check_effect_propagation(firstFunction, file_path)
        allIssues = append_issues(allIssues, propagationIssues)
        
        return Ok(allIssues)
    }
    
    return Ok([])
}

// Check effect completeness - all side effects must be declared
function check_effect_completeness(func: FunctionInfo, file_path: string) -> List<EffectIssue> {
    let issues = []
    
    if !func.is_pure {
        let bodyContent = func.body_content
        let declaredEffects = func.declared_effects
        let usedEffects = detect_used_effects(bodyContent)
        
        // Check for runtime calls that indicate effects
        if Cadenza.Runtime.StringRuntime.Contains(bodyContent, "Cadenza.Runtime.FileSystemRuntime") {
            if !contains_effect(declaredEffects, "FileSystem") {
                let issue = EffectIssue {
                    rule_id: "effect-completeness",
                    severity: "error",
                    message: "Function '" + func.name + "' uses FileSystem operations but doesn't declare FileSystem effect",
                    file_path: file_path,
                    line: func.line_number,
                    column: 1,
                    fix_suggestion: "Add 'FileSystem' to the uses clause: uses [FileSystem, ...]"
                }
                issues = issue :: issues
            }
        }
        
        if Cadenza.Runtime.StringRuntime.Contains(bodyContent, "Cadenza.Runtime.LoggingRuntime") {
            if !contains_effect(declaredEffects, "Logging") {
                let issue = EffectIssue {
                    rule_id: "effect-completeness",
                    severity: "error",
                    message: "Function '" + func.name + "' uses Logging operations but doesn't declare Logging effect",
                    file_path: file_path,
                    line: func.line_number,
                    column: 1,
                    fix_suggestion: "Add 'Logging' to the uses clause: uses [Logging, ...]"
                }
                issues = issue :: issues
            }
        }
        
        if Cadenza.Runtime.StringRuntime.Contains(bodyContent, "Cadenza.Runtime.DatabaseRuntime") {
            if !contains_effect(declaredEffects, "Database") {
                let issue = EffectIssue {
                    rule_id: "effect-completeness",
                    severity: "error",
                    message: "Function '" + func.name + "' uses Database operations but doesn't declare Database effect",
                    file_path: file_path,
                    line: func.line_number,
                    column: 1,
                    fix_suggestion: "Add 'Database' to the uses clause: uses [Database, ...]"
                }
                issues = issue :: issues
            }
        }
        
        if Cadenza.Runtime.StringRuntime.Contains(bodyContent, "Cadenza.Runtime.NetworkRuntime") {
            if !contains_effect(declaredEffects, "Network") {
                let issue = EffectIssue {
                    rule_id: "effect-completeness",
                    severity: "error",
                    message: "Function '" + func.name + "' uses Network operations but doesn't declare Network effect",
                    file_path: file_path,
                    line: func.line_number,
                    column: 1,
                    fix_suggestion: "Add 'Network' to the uses clause: uses [Network, ...]"
                }
                issues = issue :: issues
            }
        }
        
        if Cadenza.Runtime.StringRuntime.Contains(bodyContent, "Cadenza.Runtime.ConsoleRuntime") {
            if !contains_effect(declaredEffects, "IO") {
                let issue = EffectIssue {
                    rule_id: "effect-completeness",
                    severity: "error",
                    message: "Function '" + func.name + "' uses Console I/O operations but doesn't declare IO effect",
                    file_path: file_path,
                    line: func.line_number,
                    column: 1,
                    fix_suggestion: "Add 'IO' to the uses clause: uses [IO, ...]"
                }
                issues = issue :: issues
            }
        }
    }
    
    return issues
}

// Check effect minimality - no unused effects should be declared
function check_effect_minimality(func: FunctionInfo, file_path: string) -> List<EffectIssue> {
    let issues = []
    
    if !func.is_pure {
        let bodyContent = func.body_content
        let declaredEffects = func.declared_effects
        
        // Check each declared effect to see if it's actually used
        if contains_effect(declaredEffects, "FileSystem") {
            if !Cadenza.Runtime.StringRuntime.Contains(bodyContent, "Cadenza.Runtime.FileSystemRuntime") {
                let issue = EffectIssue {
                    rule_id: "effect-minimality",
                    severity: "warning",
                    message: "Function '" + func.name + "' declares FileSystem effect but doesn't use it",
                    file_path: file_path,
                    line: func.line_number,
                    column: 1,
                    fix_suggestion: "Remove 'FileSystem' from the uses clause if not needed"
                }
                issues = issue :: issues
            }
        }
        
        if contains_effect(declaredEffects, "Database") {
            if !Cadenza.Runtime.StringRuntime.Contains(bodyContent, "Cadenza.Runtime.DatabaseRuntime") {
                let issue = EffectIssue {
                    rule_id: "effect-minimality",
                    severity: "warning",
                    message: "Function '" + func.name + "' declares Database effect but doesn't use it",
                    file_path: file_path,
                    line: func.line_number,
                    column: 1,
                    fix_suggestion: "Remove 'Database' from the uses clause if not needed"
                }
                issues = issue :: issues
            }
        }
        
        if contains_effect(declaredEffects, "Network") {
            if !Cadenza.Runtime.StringRuntime.Contains(bodyContent, "Cadenza.Runtime.NetworkRuntime") {
                let issue = EffectIssue {
                    rule_id: "effect-minimality",
                    severity: "warning",
                    message: "Function '" + func.name + "' declares Network effect but doesn't use it",
                    file_path: file_path,
                    line: func.line_number,
                    column: 1,
                    fix_suggestion: "Remove 'Network' from the uses clause if not needed"
                }
                issues = issue :: issues
            }
        }
        
        if contains_effect(declaredEffects, "Logging") {
            if !Cadenza.Runtime.StringRuntime.Contains(bodyContent, "Cadenza.Runtime.LoggingRuntime") {
                let issue = EffectIssue {
                    rule_id: "effect-minimality",
                    severity: "warning",
                    message: "Function '" + func.name + "' declares Logging effect but doesn't use it",
                    file_path: file_path,
                    line: func.line_number,
                    column: 1,
                    fix_suggestion: "Remove 'Logging' from the uses clause if not needed"
                }
                issues = issue :: issues
            }
        }
        
        if contains_effect(declaredEffects, "IO") {
            if !Cadenza.Runtime.StringRuntime.Contains(bodyContent, "Cadenza.Runtime.ConsoleRuntime") {
                let issue = EffectIssue {
                    rule_id: "effect-minimality",
                    severity: "warning",
                    message: "Function '" + func.name + "' declares IO effect but doesn't use it",
                    file_path: file_path,
                    line: func.line_number,
                    column: 1,
                    fix_suggestion: "Remove 'IO' from the uses clause if not needed"
                }
                issues = issue :: issues
            }
        }
    }
    
    return issues
}

// Check pure function validation - pure functions cannot have effects
function check_pure_function_validation(func: FunctionInfo, file_path: string) -> List<EffectIssue> {
    let issues = []
    
    if func.is_pure {
        // Pure functions cannot declare effects
        if func.declared_effects.length > 0 {
            let issue = EffectIssue {
                rule_id: "pure-function-validation",
                severity: "error",
                message: "Pure function '" + func.name + "' cannot declare effects",
                file_path: file_path,
                line: func.line_number,
                column: 1,
                fix_suggestion: "Remove 'pure' modifier or remove effects declaration"
            }
            issues = issue :: issues
        }
        
        // Pure functions cannot use runtime operations
        let bodyContent = func.body_content
        if Cadenza.Runtime.StringRuntime.Contains(bodyContent, "Cadenza.Runtime.") {
            let issue = EffectIssue {
                rule_id: "pure-function-validation",
                severity: "error",
                message: "Pure function '" + func.name + "' cannot use runtime operations",
                file_path: file_path,
                line: func.line_number,
                column: 1,
                fix_suggestion: "Remove 'pure' modifier or remove runtime operations"
            }
            issues = issue :: issues
        }
    }
    
    return issues
}

// Check effect propagation - callers must handle or propagate callee effects
function check_effect_propagation(func: FunctionInfo, file_path: string) -> List<EffectIssue> {
    let issues = []
    
    if !func.is_pure {
        let bodyContent = func.body_content
        let declaredEffects = func.declared_effects
        
        // Check for function calls that might have effects
        if Cadenza.Runtime.StringRuntime.Contains(bodyContent, "read_file(") {
            if !contains_effect(declaredEffects, "FileSystem") {
                let issue = EffectIssue {
                    rule_id: "effect-propagation",
                    severity: "error",
                    message: "Function '" + func.name + "' calls read_file() but doesn't declare FileSystem effect",
                    file_path: file_path,
                    line: func.line_number,
                    column: 1,
                    fix_suggestion: "Add 'FileSystem' to the uses clause to propagate the effect"
                }
                issues = issue :: issues
            }
        }
        
        if Cadenza.Runtime.StringRuntime.Contains(bodyContent, "log_info(") {
            if !contains_effect(declaredEffects, "Logging") {
                let issue = EffectIssue {
                    rule_id: "effect-propagation",
                    severity: "error",
                    message: "Function '" + func.name + "' calls log_info() but doesn't declare Logging effect",
                    file_path: file_path,
                    line: func.line_number,
                    column: 1,
                    fix_suggestion: "Add 'Logging' to the uses clause to propagate the effect"
                }
                issues = issue :: issues
            }
        }
        
        if Cadenza.Runtime.StringRuntime.Contains(bodyContent, "database_query(") {
            if !contains_effect(declaredEffects, "Database") {
                let issue = EffectIssue {
                    rule_id: "effect-propagation",
                    severity: "error",
                    message: "Function '" + func.name + "' calls database_query() but doesn't declare Database effect",
                    file_path: file_path,
                    line: func.line_number,
                    column: 1,
                    fix_suggestion: "Add 'Database' to the uses clause to propagate the effect"
                }
                issues = issue :: issues
            }
        }
        
        if Cadenza.Runtime.StringRuntime.Contains(bodyContent, "http_request(") {
            if !contains_effect(declaredEffects, "Network") {
                let issue = EffectIssue {
                    rule_id: "effect-propagation",
                    severity: "error",
                    message: "Function '" + func.name + "' calls http_request() but doesn't declare Network effect",
                    file_path: file_path,
                    line: func.line_number,
                    column: 1,
                    fix_suggestion: "Add 'Network' to the uses clause to propagate the effect"
                }
                issues = issue :: issues
            }
        }
    }
    
    return issues
}

// Helper function to check if an effect is in the list
function contains_effect(effects: List<string>, effect: string) -> bool {
    if effects.length > 0 {
        let firstEffect = effects[0]
        if firstEffect == effect {
            return true
        }
    }
    
    // In a complete implementation, this would check all effects
    // For now, just check common cases
    return effect == "FileSystem" && Cadenza.Runtime.StringRuntime.Contains(Cadenza.Runtime.StringRuntime.ToString(effects.length), "FileSystem")
}

// Detect used effects from body content
function detect_used_effects(bodyContent: string) -> List<string> {
    let usedEffects = []
    
    if Cadenza.Runtime.StringRuntime.Contains(bodyContent, "Cadenza.Runtime.FileSystemRuntime") {
        usedEffects = "FileSystem" :: usedEffects
    }
    
    if Cadenza.Runtime.StringRuntime.Contains(bodyContent, "Cadenza.Runtime.LoggingRuntime") {
        usedEffects = "Logging" :: usedEffects
    }
    
    if Cadenza.Runtime.StringRuntime.Contains(bodyContent, "Cadenza.Runtime.DatabaseRuntime") {
        usedEffects = "Database" :: usedEffects
    }
    
    if Cadenza.Runtime.StringRuntime.Contains(bodyContent, "Cadenza.Runtime.NetworkRuntime") {
        usedEffects = "Network" :: usedEffects
    }
    
    if Cadenza.Runtime.StringRuntime.Contains(bodyContent, "Cadenza.Runtime.ConsoleRuntime") {
        usedEffects = "IO" :: usedEffects
    }
    
    return usedEffects
}

// Append issues to issue list
function append_issues(existingIssues: List<EffectIssue>, newIssues: List<EffectIssue>) -> List<EffectIssue> {
    // For now, just return the new issues
    // In a complete implementation, this would properly append lists
    return newIssues
}

// Count function types
function count_function_types(functions: List<FunctionInfo>) -> (int, int, List<(string, int)>) {
    let pureCount = 0
    let effectCount = 0
    let commonEffects = []
    
    if functions.length > 0 {
        let firstFunc = functions[0]
        if firstFunc.is_pure {
            pureCount = 1
        } else {
            effectCount = 1
            
            // Count common effects
            if contains_effect(firstFunc.declared_effects, "FileSystem") {
                commonEffects = ("FileSystem", 1) :: commonEffects
            }
            
            if contains_effect(firstFunc.declared_effects, "Logging") {
                commonEffects = ("Logging", 1) :: commonEffects
            }
            
            if contains_effect(firstFunc.declared_effects, "Database") {
                commonEffects = ("Database", 1) :: commonEffects
            }
            
            if contains_effect(firstFunc.declared_effects, "Network") {
                commonEffects = ("Network", 1) :: commonEffects
            }
            
            if contains_effect(firstFunc.declared_effects, "IO") {
                commonEffects = ("IO", 1) :: commonEffects
            }
        }
    }
    
    return (pureCount, effectCount, commonEffects)
}

// Format effect analysis results
function format_effect_results(results: EffectAnalysisResult) uses [IO, Logging] -> Result<string, string> {
    Cadenza.Runtime.LoggingRuntime.LogInfo("Formatting effect analysis results...")
    
    Cadenza.Runtime.ConsoleRuntime.WriteLine("=== Effect System Analysis ===")
    Cadenza.Runtime.ConsoleRuntime.WriteLine("Total functions analyzed: " + Cadenza.Runtime.StringRuntime.ToString(results.total_functions))
    Cadenza.Runtime.ConsoleRuntime.WriteLine("Pure functions: " + Cadenza.Runtime.StringRuntime.ToString(results.pure_functions))
    Cadenza.Runtime.ConsoleRuntime.WriteLine("Functions with effects: " + Cadenza.Runtime.StringRuntime.ToString(results.functions_with_effects))
    Cadenza.Runtime.ConsoleRuntime.WriteLine("Total issues found: " + Cadenza.Runtime.StringRuntime.ToString(results.issues.length))
    Cadenza.Runtime.ConsoleRuntime.WriteLine("")
    
    if results.issues.length > 0 {
        Cadenza.Runtime.ConsoleRuntime.WriteLine("Issues found:")
        
        // Display first issue as example
        let firstIssue = results.issues[0]
        Cadenza.Runtime.ConsoleRuntime.WriteLine("  [" + firstIssue.severity + "] " + firstIssue.message)
        Cadenza.Runtime.ConsoleRuntime.WriteLine("    Fix: " + firstIssue.fix_suggestion)
        
        if results.issues.length > 1 {
            Cadenza.Runtime.ConsoleRuntime.WriteLine("  ... and " + Cadenza.Runtime.StringRuntime.ToString(results.issues.length - 1) + " more issues")
        }
    } else {
        Cadenza.Runtime.ConsoleRuntime.WriteLine("✓ No effect system issues found")
    }
    
    Cadenza.Runtime.ConsoleRuntime.WriteLine("")
    return Ok("Effect analysis formatted")
}

// Main function for testing effect analyzer
function main() uses [FileSystem, Logging, IO] -> Result<int, string> {
    Cadenza.Runtime.LoggingRuntime.LogInfo("Cadenza Effect Analyzer Test")
    
    let testFile = "src/Cadenza.Tools/linter.cdz"
    let contentResult = Cadenza.Runtime.FileSystemRuntime.ReadFile(testFile)
    
    match contentResult {
        Ok(content) -> {
            let analysisResult = analyze_effects(testFile, content)
            match analysisResult {
                Ok(results) -> {
                    let formatResult = format_effect_results(results)
                    match formatResult {
                        Ok(_) -> {
                            Cadenza.Runtime.LoggingRuntime.LogInfo("Effect analysis completed successfully")
                            return Ok(0)
                        }
                        Error(err) -> {
                            Cadenza.Runtime.LoggingRuntime.LogError("Failed to format results: " + err)
                            return Error(err)
                        }
                    }
                }
                Error(err) -> {
                    Cadenza.Runtime.LoggingRuntime.LogError("Effect analysis failed: " + err)
                    return Error(err)
                }
            }
        }
        Error(err) -> {
            Cadenza.Runtime.LoggingRuntime.LogError("Failed to read test file: " + err)
            return Error(err)
        }
    }
}